一、工具链集成与技术适配(重要)
1、多工具兼容性建议及实践：需整合代码仓库、CI 引擎、构建工具、容器平台等（熟悉，有相关经验）
2、技术栈多样性建议及实践：兼容多语言（Java、Python、Go、C++、C#等）、多框架（Spring、React、Vue等）项目，定制不同的构建流程（对java，python和go以及spring构建有相关经验，对其他语言和框架的构建有一定的了解）
3、遗留系统适配建议及实践：传统项目可能依赖特定环境（如老旧 JDK、本地库）（非定制的开源的系统或组件适配，一般可以搞定）


二、质量与安全管控(重要)
1、自动化测试工具集成及实践：自动化测试用例的覆盖度及关键点最佳实践、自动化测试工具、集成方法、自动化脚本编写等（集成方法、自动化脚本比较熟悉，其他有所了解）
2、代码静态扫描工具集成及实践: 不同语言的静态检查工具使用建议及推荐方案（对java，python的静态扫描工具熟悉一些）
3、负面清单如何跟实际研发相结合，是否有工具支撑。（不了解）
4、质量把控的流程实践（了解静态代码扫描、缺陷管理这一部分）
5、AI编程助手（有在使用，目前主要用Roo code，通义灵码和Claude Code生成或检查代码）
6、安全漏洞检测集成及实践：集成 SAST/DAST 工具的建议及使用注意事项（SAST工具比如sonaqube在CI/CD中有集成过，DAST工具比如burpsuite，metasploit单独使用过）


三、运维与稳定性（次要）
1、CI监控与告警方案建议及实践：构建成功率、资源使用率等（熟悉，有相关经验）
2、日常的运维方法建议及实践（熟悉，有相关经验）

四、性能与资源（建议）
1、构建效率建议：依赖下载需要依赖外网环境（如 Maven 中央仓库）（对常见语言/框架的外网依赖库的下载方法均有所了解）
2、硬件资源建议：CI 节点硬件并发构建任务多，需要推荐合适的硬件资源（需要看实际情况，能够给出一定建议）
3、缓存策略建议：合理配置依赖缓存（如 npm/node_modules、Docker 层缓存），避免资源浪费（对docker构建过程中的分层缓存比较了解）










