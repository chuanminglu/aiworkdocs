@startuml 短信登录核心流程图
!theme plain
skinparam note over User, SMS
✅ 成功路径：输入手机号 → 获取验证码 → 输入验证码 → 登录成功
⚠️  关键验证：手机号格式 + 验证码有效性 + 发送频率限制
🔒 安全保障：5分钟过期 + 1分钟频控 + JWT认证

🛠️ 技术栈选择：
前端：Vue3 + TypeScript + Pinia + Element Plus
后端：Node.js/Java + Redis + MySQL + SMS SDK
安全：JWT + HTTPS + 频率限制 + 参数验证
end noteroundColor white
skinparam sequenceMessageAlign center
skinparam maxMessageSize 120
skinparam participant {
    BackgroundColor lightblue
    BorderColor navy
}

title 短信验证码登录核心流程\n(PPT版本 + 技术实现思路)

actor "👤用户" as User
participant "📱前端" as Web  
participant "🔧后端" as API
participant "📨短信" as SMS

== 核心登录流程 ==
User -> Web: 1️⃣ 输入手机号
note right: Vue3表单组件 + 正则验证\n/^1[3-9]\d{9}$/.test(phone)\n实时验证反馈

Web -> API: 2️⃣ 请求发送验证码
note right: Axios POST请求\n/api/sms/send\n{phone: "13800138000"}

API -> SMS: 3️⃣ 调用短信服务
note right: 阿里云/腾讯云SMS SDK\n生成6位随机数字\nRedis缓存5分钟

SMS -> User: 4️⃣ 发送验证码短信
note right: 短信模板：验证码${code}\n${minutes}分钟内有效\n请勿泄露给他人

User -> Web: 5️⃣ 输入验证码
note right: 输入框限制6位数字\n自动聚焦下一个输入框\n倒计时60秒防重发

Web -> API: 6️⃣ 提交登录验证  
note right: POST /api/auth/sms-login\n{phone, code, timestamp}\nJWT Token请求

API -> API: 7️⃣ 验证码校验
note right: Redis.get(phone:code)\n时效性检查\n使用后立即删除

API -> Web: 8️⃣ 返回登录结果
note right: 成功：{token, userInfo}\n失败：{error, message}\nHTTP状态码处理

Web -> User: 9️⃣ 跳转主页面
note right: Pinia状态管理\nlocalStorage存储Token\nVue Router导航守卫

note over User, SMS
✅ 成功路径：输入手机号 → 获取验证码 → 输入验证码 → 登录成功
⚠️  关键验证：手机号格式 + 验证码有效性 + 发送频率限制
� 安全保障：5分钟过期 + 1分钟频控 + JWT认证
end note

@enduml
